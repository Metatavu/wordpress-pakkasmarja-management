<?php
/**
 * ItemGroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pakkasmarja REST API
 *
 * REST API for Pakkasmarja
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Pakkasmarja\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Metatavu\Pakkasmarja\ApiException;
use Metatavu\Pakkasmarja\Configuration;
use Metatavu\Pakkasmarja\HeaderSelector;
use Metatavu\Pakkasmarja\ObjectSerializer;

/**
 * ItemGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemGroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createItemGroupPrice
     *
     * Creates item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Price
     */
    public function createItemGroupPrice($itemGroupId, $body)
    {
        list($response) = $this->createItemGroupPriceWithHttpInfo($itemGroupId, $body);
        return $response;
    }

    /**
     * Operation createItemGroupPriceWithHttpInfo
     *
     * Creates item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Price, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemGroupPriceWithHttpInfo($itemGroupId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->createItemGroupPriceRequest($itemGroupId, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Price',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createItemGroupPriceAsync
     *
     * Creates item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemGroupPriceAsync($itemGroupId, $body)
    {
        return $this->createItemGroupPriceAsyncWithHttpInfo($itemGroupId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createItemGroupPriceAsyncWithHttpInfo
     *
     * Creates item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemGroupPriceAsyncWithHttpInfo($itemGroupId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->createItemGroupPriceRequest($itemGroupId, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createItemGroupPrice'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createItemGroupPriceRequest($itemGroupId, $body)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling createItemGroupPrice'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createItemGroupPrice'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteItemGroupPrice
     *
     * Delete item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteItemGroupPrice($itemGroupId, $priceId)
    {
        $this->deleteItemGroupPriceWithHttpInfo($itemGroupId, $priceId);
    }

    /**
     * Operation deleteItemGroupPriceWithHttpInfo
     *
     * Delete item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemGroupPriceWithHttpInfo($itemGroupId, $priceId)
    {
        $returnType = '';
        $request = $this->deleteItemGroupPriceRequest($itemGroupId, $priceId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteItemGroupPriceAsync
     *
     * Delete item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemGroupPriceAsync($itemGroupId, $priceId)
    {
        return $this->deleteItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteItemGroupPriceAsyncWithHttpInfo
     *
     * Delete item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId)
    {
        $returnType = '';
        $request = $this->deleteItemGroupPriceRequest($itemGroupId, $priceId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteItemGroupPrice'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteItemGroupPriceRequest($itemGroupId, $priceId)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling deleteItemGroupPrice'
            );
        }
        // verify the required parameter 'priceId' is set
        if ($priceId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $priceId when calling deleteItemGroupPrice'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/prices/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findItemGroup
     *
     * Find item group
     *
     * @param  string $id item group id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ItemGroup
     */
    public function findItemGroup($id)
    {
        list($response) = $this->findItemGroupWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation findItemGroupWithHttpInfo
     *
     * Find item group
     *
     * @param  string $id item group id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ItemGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function findItemGroupWithHttpInfo($id)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroup';
        $request = $this->findItemGroupRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ItemGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findItemGroupAsync
     *
     * Find item group
     *
     * @param  string $id item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupAsync($id)
    {
        return $this->findItemGroupAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findItemGroupAsyncWithHttpInfo
     *
     * Find item group
     *
     * @param  string $id item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupAsyncWithHttpInfo($id)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroup';
        $request = $this->findItemGroupRequest($id);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findItemGroup'
     *
     * @param  string $id item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findItemGroupRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findItemGroup'
            );
        }

        $resourcePath = '/itemGroups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findItemGroupDocumentTemplate
     *
     * Find item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate
     */
    public function findItemGroupDocumentTemplate($itemGroupId, $id)
    {
        list($response) = $this->findItemGroupDocumentTemplateWithHttpInfo($itemGroupId, $id);
        return $response;
    }

    /**
     * Operation findItemGroupDocumentTemplateWithHttpInfo
     *
     * Find item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function findItemGroupDocumentTemplateWithHttpInfo($itemGroupId, $id)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate';
        $request = $this->findItemGroupDocumentTemplateRequest($itemGroupId, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findItemGroupDocumentTemplateAsync
     *
     * Find item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupDocumentTemplateAsync($itemGroupId, $id)
    {
        return $this->findItemGroupDocumentTemplateAsyncWithHttpInfo($itemGroupId, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findItemGroupDocumentTemplateAsyncWithHttpInfo
     *
     * Find item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupDocumentTemplateAsyncWithHttpInfo($itemGroupId, $id)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate';
        $request = $this->findItemGroupDocumentTemplateRequest($itemGroupId, $id);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findItemGroupDocumentTemplate'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findItemGroupDocumentTemplateRequest($itemGroupId, $id)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling findItemGroupDocumentTemplate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findItemGroupDocumentTemplate'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/documentTemplates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findItemGroupPrice
     *
     * Find item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Price
     */
    public function findItemGroupPrice($itemGroupId, $priceId)
    {
        list($response) = $this->findItemGroupPriceWithHttpInfo($itemGroupId, $priceId);
        return $response;
    }

    /**
     * Operation findItemGroupPriceWithHttpInfo
     *
     * Find item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Price, HTTP status code, HTTP response headers (array of strings)
     */
    public function findItemGroupPriceWithHttpInfo($itemGroupId, $priceId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->findItemGroupPriceRequest($itemGroupId, $priceId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Price',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findItemGroupPriceAsync
     *
     * Find item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupPriceAsync($itemGroupId, $priceId)
    {
        return $this->findItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findItemGroupPriceAsyncWithHttpInfo
     *
     * Find item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->findItemGroupPriceRequest($itemGroupId, $priceId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findItemGroupPrice'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findItemGroupPriceRequest($itemGroupId, $priceId)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling findItemGroupPrice'
            );
        }
        // verify the required parameter 'priceId' is set
        if ($priceId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $priceId when calling findItemGroupPrice'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/prices/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItemGroupDocumentTemplates
     *
     * List item group document templates
     *
     * @param  string $itemGroupId item group id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate[]
     */
    public function listItemGroupDocumentTemplates($itemGroupId)
    {
        list($response) = $this->listItemGroupDocumentTemplatesWithHttpInfo($itemGroupId);
        return $response;
    }

    /**
     * Operation listItemGroupDocumentTemplatesWithHttpInfo
     *
     * List item group document templates
     *
     * @param  string $itemGroupId item group id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemGroupDocumentTemplatesWithHttpInfo($itemGroupId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate[]';
        $request = $this->listItemGroupDocumentTemplatesRequest($itemGroupId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemGroupDocumentTemplatesAsync
     *
     * List item group document templates
     *
     * @param  string $itemGroupId item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupDocumentTemplatesAsync($itemGroupId)
    {
        return $this->listItemGroupDocumentTemplatesAsyncWithHttpInfo($itemGroupId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemGroupDocumentTemplatesAsyncWithHttpInfo
     *
     * List item group document templates
     *
     * @param  string $itemGroupId item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupDocumentTemplatesAsyncWithHttpInfo($itemGroupId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate[]';
        $request = $this->listItemGroupDocumentTemplatesRequest($itemGroupId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItemGroupDocumentTemplates'
     *
     * @param  string $itemGroupId item group id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listItemGroupDocumentTemplatesRequest($itemGroupId)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling listItemGroupDocumentTemplates'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/documentTemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItemGroupPrices
     *
     * List item group prices
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Price[]
     */
    public function listItemGroupPrices($itemGroupId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        list($response) = $this->listItemGroupPricesWithHttpInfo($itemGroupId, $sortBy, $sortDir, $firstResult, $maxResults);
        return $response;
    }

    /**
     * Operation listItemGroupPricesWithHttpInfo
     *
     * List item group prices
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Price[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemGroupPricesWithHttpInfo($itemGroupId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price[]';
        $request = $this->listItemGroupPricesRequest($itemGroupId, $sortBy, $sortDir, $firstResult, $maxResults);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Price[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemGroupPricesAsync
     *
     * List item group prices
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupPricesAsync($itemGroupId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        return $this->listItemGroupPricesAsyncWithHttpInfo($itemGroupId, $sortBy, $sortDir, $firstResult, $maxResults)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemGroupPricesAsyncWithHttpInfo
     *
     * List item group prices
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupPricesAsyncWithHttpInfo($itemGroupId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price[]';
        $request = $this->listItemGroupPricesRequest($itemGroupId, $sortBy, $sortDir, $firstResult, $maxResults);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItemGroupPrices'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listItemGroupPricesRequest($itemGroupId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling listItemGroupPrices'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortDir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sortDir);
        }
        // query params
        if ($firstResult !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($firstResult);
        }
        // query params
        if ($maxResults !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($maxResults);
        }

        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItemGroups
     *
     * Lists item groups
     *
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ItemGroup[]
     */
    public function listItemGroups()
    {
        list($response) = $this->listItemGroupsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listItemGroupsWithHttpInfo
     *
     * Lists item groups
     *
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ItemGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemGroupsWithHttpInfo()
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroup[]';
        $request = $this->listItemGroupsRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ItemGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemGroupsAsync
     *
     * Lists item groups
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupsAsync()
    {
        return $this->listItemGroupsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemGroupsAsyncWithHttpInfo
     *
     * Lists item groups
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemGroupsAsyncWithHttpInfo()
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroup[]';
        $request = $this->listItemGroupsRequest();

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItemGroups'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listItemGroupsRequest()
    {

        $resourcePath = '/itemGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItemGroupDocumentTemplate
     *
     * Updates item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate
     */
    public function updateItemGroupDocumentTemplate($itemGroupId, $id, $body)
    {
        list($response) = $this->updateItemGroupDocumentTemplateWithHttpInfo($itemGroupId, $id, $body);
        return $response;
    }

    /**
     * Operation updateItemGroupDocumentTemplateWithHttpInfo
     *
     * Updates item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemGroupDocumentTemplateWithHttpInfo($itemGroupId, $id, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate';
        $request = $this->updateItemGroupDocumentTemplateRequest($itemGroupId, $id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItemGroupDocumentTemplateAsync
     *
     * Updates item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemGroupDocumentTemplateAsync($itemGroupId, $id, $body)
    {
        return $this->updateItemGroupDocumentTemplateAsyncWithHttpInfo($itemGroupId, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemGroupDocumentTemplateAsyncWithHttpInfo
     *
     * Updates item group document template
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemGroupDocumentTemplateAsyncWithHttpInfo($itemGroupId, $id, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate';
        $request = $this->updateItemGroupDocumentTemplateRequest($itemGroupId, $id, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItemGroupDocumentTemplate'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $id template id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ItemGroupDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateItemGroupDocumentTemplateRequest($itemGroupId, $id, $body)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling updateItemGroupDocumentTemplate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateItemGroupDocumentTemplate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateItemGroupDocumentTemplate'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/documentTemplates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItemGroupPrice
     *
     * Update item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Price
     */
    public function updateItemGroupPrice($itemGroupId, $priceId, $body)
    {
        list($response) = $this->updateItemGroupPriceWithHttpInfo($itemGroupId, $priceId, $body);
        return $response;
    }

    /**
     * Operation updateItemGroupPriceWithHttpInfo
     *
     * Update item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Price, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemGroupPriceWithHttpInfo($itemGroupId, $priceId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->updateItemGroupPriceRequest($itemGroupId, $priceId, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Price',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItemGroupPriceAsync
     *
     * Update item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemGroupPriceAsync($itemGroupId, $priceId, $body)
    {
        return $this->updateItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemGroupPriceAsyncWithHttpInfo
     *
     * Update item group price
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemGroupPriceAsyncWithHttpInfo($itemGroupId, $priceId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price';
        $request = $this->updateItemGroupPriceRequest($itemGroupId, $priceId, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItemGroupPrice'
     *
     * @param  string $itemGroupId item group id (required)
     * @param  string $priceId price id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Price $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateItemGroupPriceRequest($itemGroupId, $priceId, $body)
    {
        // verify the required parameter 'itemGroupId' is set
        if ($itemGroupId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemGroupId when calling updateItemGroupPrice'
            );
        }
        // verify the required parameter 'priceId' is set
        if ($priceId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $priceId when calling updateItemGroupPrice'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateItemGroupPrice'
            );
        }

        $resourcePath = '/itemGroups/{itemGroupId}/prices/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($itemGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'itemGroupId' . '}',
                ObjectSerializer::toPathValue($itemGroupId),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
