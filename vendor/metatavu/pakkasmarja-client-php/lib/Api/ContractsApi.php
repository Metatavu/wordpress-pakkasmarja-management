<?php
/**
 * ContractsApi
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pakkasmarja REST API
 *
 * REST API for Pakkasmarja
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Pakkasmarja\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Metatavu\Pakkasmarja\ApiException;
use Metatavu\Pakkasmarja\Configuration;
use Metatavu\Pakkasmarja\HeaderSelector;
use Metatavu\Pakkasmarja\ObjectSerializer;

/**
 * ContractsApi Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createContract
     *
     * Create contract
     *
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Contract
     */
    public function createContract($body)
    {
        list($response) = $this->createContractWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createContractWithHttpInfo
     *
     * Create contract
     *
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Contract, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContractWithHttpInfo($body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->createContractRequest($body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Contract',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContractAsync
     *
     * Create contract
     *
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractAsync($body)
    {
        return $this->createContractAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContractAsyncWithHttpInfo
     *
     * Create contract
     *
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractAsyncWithHttpInfo($body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->createContractRequest($body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContract'
     *
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContractRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createContract'
            );
        }

        $resourcePath = '/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createContractDocumentSignRequest
     *
     * Requests contract document electronic signing
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $ssn Social security number (required)
     * @param  string $authService Used auth service name (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest
     */
    public function createContractDocumentSignRequest($id, $type, $ssn, $authService, $body)
    {
        list($response) = $this->createContractDocumentSignRequestWithHttpInfo($id, $type, $ssn, $authService, $body);
        return $response;
    }

    /**
     * Operation createContractDocumentSignRequestWithHttpInfo
     *
     * Requests contract document electronic signing
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $ssn Social security number (required)
     * @param  string $authService Used auth service name (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContractDocumentSignRequestWithHttpInfo($id, $type, $ssn, $authService, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest';
        $request = $this->createContractDocumentSignRequestRequest($id, $type, $ssn, $authService, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContractDocumentSignRequestAsync
     *
     * Requests contract document electronic signing
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $ssn Social security number (required)
     * @param  string $authService Used auth service name (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractDocumentSignRequestAsync($id, $type, $ssn, $authService, $body)
    {
        return $this->createContractDocumentSignRequestAsyncWithHttpInfo($id, $type, $ssn, $authService, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContractDocumentSignRequestAsyncWithHttpInfo
     *
     * Requests contract document electronic signing
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $ssn Social security number (required)
     * @param  string $authService Used auth service name (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractDocumentSignRequestAsyncWithHttpInfo($id, $type, $ssn, $authService, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest';
        $request = $this->createContractDocumentSignRequestRequest($id, $type, $ssn, $authService, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContractDocumentSignRequest'
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $ssn Social security number (required)
     * @param  string $authService Used auth service name (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentSignRequest $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContractDocumentSignRequestRequest($id, $type, $ssn, $authService, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createContractDocumentSignRequest'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling createContractDocumentSignRequest'
            );
        }
        // verify the required parameter 'ssn' is set
        if ($ssn === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ssn when calling createContractDocumentSignRequest'
            );
        }
        // verify the required parameter 'authService' is set
        if ($authService === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authService when calling createContractDocumentSignRequest'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createContractDocumentSignRequest'
            );
        }

        $resourcePath = '/contracts/{id}/documents/{type}/signRequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ssn !== null) {
            $queryParams['ssn'] = ObjectSerializer::toQueryValue($ssn);
        }
        // query params
        if ($authService !== null) {
            $queryParams['authService'] = ObjectSerializer::toQueryValue($authService);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createContractDocumentTemplate
     *
     * Create contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate
     */
    public function createContractDocumentTemplate($contractId, $body)
    {
        list($response) = $this->createContractDocumentTemplateWithHttpInfo($contractId, $body);
        return $response;
    }

    /**
     * Operation createContractDocumentTemplateWithHttpInfo
     *
     * Create contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContractDocumentTemplateWithHttpInfo($contractId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->createContractDocumentTemplateRequest($contractId, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContractDocumentTemplateAsync
     *
     * Create contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractDocumentTemplateAsync($contractId, $body)
    {
        return $this->createContractDocumentTemplateAsyncWithHttpInfo($contractId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContractDocumentTemplateAsyncWithHttpInfo
     *
     * Create contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractDocumentTemplateAsyncWithHttpInfo($contractId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->createContractDocumentTemplateRequest($contractId, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContractDocumentTemplate'
     *
     * @param  string $contractId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContractDocumentTemplateRequest($contractId, $body)
    {
        // verify the required parameter 'contractId' is set
        if ($contractId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractId when calling createContractDocumentTemplate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createContractDocumentTemplate'
            );
        }

        $resourcePath = '/contracts/{contractId}/documentTemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contractId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contractId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findContract
     *
     * Find contract
     *
     * @param  string $id contract id (required)
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Contract
     */
    public function findContract($id, $accept = null)
    {
        list($response) = $this->findContractWithHttpInfo($id, $accept);
        return $response;
    }

    /**
     * Operation findContractWithHttpInfo
     *
     * Find contract
     *
     * @param  string $id contract id (required)
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Contract, HTTP status code, HTTP response headers (array of strings)
     */
    public function findContractWithHttpInfo($id, $accept = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->findContractRequest($id, $accept);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Contract',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findContractAsync
     *
     * Find contract
     *
     * @param  string $id contract id (required)
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContractAsync($id, $accept = null)
    {
        return $this->findContractAsyncWithHttpInfo($id, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findContractAsyncWithHttpInfo
     *
     * Find contract
     *
     * @param  string $id contract id (required)
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContractAsyncWithHttpInfo($id, $accept = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->findContractRequest($id, $accept);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findContract'
     *
     * @param  string $id contract id (required)
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findContractRequest($id, $accept = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findContract'
            );
        }

        $resourcePath = '/contracts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findContractDocumentTemplate
     *
     * Find contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate
     */
    public function findContractDocumentTemplate($contractId, $contractDocumentTemplateId)
    {
        list($response) = $this->findContractDocumentTemplateWithHttpInfo($contractId, $contractDocumentTemplateId);
        return $response;
    }

    /**
     * Operation findContractDocumentTemplateWithHttpInfo
     *
     * Find contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function findContractDocumentTemplateWithHttpInfo($contractId, $contractDocumentTemplateId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->findContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findContractDocumentTemplateAsync
     *
     * Find contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContractDocumentTemplateAsync($contractId, $contractDocumentTemplateId)
    {
        return $this->findContractDocumentTemplateAsyncWithHttpInfo($contractId, $contractDocumentTemplateId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findContractDocumentTemplateAsyncWithHttpInfo
     *
     * Find contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContractDocumentTemplateAsyncWithHttpInfo($contractId, $contractDocumentTemplateId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->findContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findContractDocumentTemplate'
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId)
    {
        // verify the required parameter 'contractId' is set
        if ($contractId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractId when calling findContractDocumentTemplate'
            );
        }
        // verify the required parameter 'contractDocumentTemplateId' is set
        if ($contractDocumentTemplateId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractDocumentTemplateId when calling findContractDocumentTemplate'
            );
        }

        $resourcePath = '/contracts/{contractId}/documentTemplates/{contractDocumentTemplateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contractId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contractId),
                $resourcePath
            );
        }
        // path params
        if ($contractDocumentTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractDocumentTemplateId' . '}',
                ObjectSerializer::toPathValue($contractDocumentTemplateId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractDocument
     *
     * Returns contract document
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $format document format (HTML or PDF) (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getContractDocument($id, $type, $format)
    {
        list($response) = $this->getContractDocumentWithHttpInfo($id, $type, $format);
        return $response;
    }

    /**
     * Operation getContractDocumentWithHttpInfo
     *
     * Returns contract document
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $format document format (HTML or PDF) (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractDocumentWithHttpInfo($id, $type, $format)
    {
        $returnType = 'string';
        $request = $this->getContractDocumentRequest($id, $type, $format);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractDocumentAsync
     *
     * Returns contract document
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $format document format (HTML or PDF) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractDocumentAsync($id, $type, $format)
    {
        return $this->getContractDocumentAsyncWithHttpInfo($id, $type, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractDocumentAsyncWithHttpInfo
     *
     * Returns contract document
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $format document format (HTML or PDF) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractDocumentAsyncWithHttpInfo($id, $type, $format)
    {
        $returnType = 'string';
        $request = $this->getContractDocumentRequest($id, $type, $format);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractDocument'
     *
     * @param  string $id contract id (required)
     * @param  string $type document type (required)
     * @param  string $format document format (HTML or PDF) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContractDocumentRequest($id, $type, $format)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getContractDocument'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getContractDocument'
            );
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling getContractDocument'
            );
        }

        $resourcePath = '/contracts/{id}/documents/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContractDocumentTemplates
     *
     * List contract document templates
     *
     * @param  string $contractId contract id (required)
     * @param  string $type Filter results by document template type (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate[]
     */
    public function listContractDocumentTemplates($contractId, $type = null)
    {
        list($response) = $this->listContractDocumentTemplatesWithHttpInfo($contractId, $type);
        return $response;
    }

    /**
     * Operation listContractDocumentTemplatesWithHttpInfo
     *
     * List contract document templates
     *
     * @param  string $contractId contract id (required)
     * @param  string $type Filter results by document template type (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listContractDocumentTemplatesWithHttpInfo($contractId, $type = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate[]';
        $request = $this->listContractDocumentTemplatesRequest($contractId, $type);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listContractDocumentTemplatesAsync
     *
     * List contract document templates
     *
     * @param  string $contractId contract id (required)
     * @param  string $type Filter results by document template type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractDocumentTemplatesAsync($contractId, $type = null)
    {
        return $this->listContractDocumentTemplatesAsyncWithHttpInfo($contractId, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContractDocumentTemplatesAsyncWithHttpInfo
     *
     * List contract document templates
     *
     * @param  string $contractId contract id (required)
     * @param  string $type Filter results by document template type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractDocumentTemplatesAsyncWithHttpInfo($contractId, $type = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate[]';
        $request = $this->listContractDocumentTemplatesRequest($contractId, $type);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContractDocumentTemplates'
     *
     * @param  string $contractId contract id (required)
     * @param  string $type Filter results by document template type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listContractDocumentTemplatesRequest($contractId, $type = null)
    {
        // verify the required parameter 'contractId' is set
        if ($contractId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractId when calling listContractDocumentTemplates'
            );
        }

        $resourcePath = '/contracts/{contractId}/documentTemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($contractId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contractId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContractPrices
     *
     * List contract prices
     *
     * @param  string $contractId contract id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Price[]
     */
    public function listContractPrices($contractId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        list($response) = $this->listContractPricesWithHttpInfo($contractId, $sortBy, $sortDir, $firstResult, $maxResults);
        return $response;
    }

    /**
     * Operation listContractPricesWithHttpInfo
     *
     * List contract prices
     *
     * @param  string $contractId contract id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Price[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listContractPricesWithHttpInfo($contractId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price[]';
        $request = $this->listContractPricesRequest($contractId, $sortBy, $sortDir, $firstResult, $maxResults);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Price[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listContractPricesAsync
     *
     * List contract prices
     *
     * @param  string $contractId contract id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractPricesAsync($contractId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        return $this->listContractPricesAsyncWithHttpInfo($contractId, $sortBy, $sortDir, $firstResult, $maxResults)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContractPricesAsyncWithHttpInfo
     *
     * List contract prices
     *
     * @param  string $contractId contract id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractPricesAsyncWithHttpInfo($contractId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Price[]';
        $request = $this->listContractPricesRequest($contractId, $sortBy, $sortDir, $firstResult, $maxResults);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContractPrices'
     *
     * @param  string $contractId contract id (required)
     * @param  string $sortBy sort by (YEAR) (optional)
     * @param  string $sortDir sort direction (ASC, DESC) (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listContractPricesRequest($contractId, $sortBy = null, $sortDir = null, $firstResult = null, $maxResults = null)
    {
        // verify the required parameter 'contractId' is set
        if ($contractId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractId when calling listContractPrices'
            );
        }

        $resourcePath = '/contracts/{contractId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortDir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sortDir);
        }
        // query params
        if ($firstResult !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($firstResult);
        }
        // query params
        if ($maxResults !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($maxResults);
        }

        // path params
        if ($contractId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contractId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContracts
     *
     * Lists contracts
     *
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     * @param  bool $listAll Returns all contracts instead of just user&#39;s own contracts. User must have permission to do this. (optional)
     * @param  string $itemGroupCategory Filters results by item group category. (optional)
     * @param  string $itemGroupId Filters results by item group id. (optional)
     * @param  int $year Filters results by year. (optional)
     * @param  string $status Filters results by status (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Contract[]
     */
    public function listContracts($accept = null, $listAll = null, $itemGroupCategory = null, $itemGroupId = null, $year = null, $status = null, $firstResult = null, $maxResults = null)
    {
        list($response) = $this->listContractsWithHttpInfo($accept, $listAll, $itemGroupCategory, $itemGroupId, $year, $status, $firstResult, $maxResults);
        return $response;
    }

    /**
     * Operation listContractsWithHttpInfo
     *
     * Lists contracts
     *
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     * @param  bool $listAll Returns all contracts instead of just user&#39;s own contracts. User must have permission to do this. (optional)
     * @param  string $itemGroupCategory Filters results by item group category. (optional)
     * @param  string $itemGroupId Filters results by item group id. (optional)
     * @param  int $year Filters results by year. (optional)
     * @param  string $status Filters results by status (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Contract[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listContractsWithHttpInfo($accept = null, $listAll = null, $itemGroupCategory = null, $itemGroupId = null, $year = null, $status = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract[]';
        $request = $this->listContractsRequest($accept, $listAll, $itemGroupCategory, $itemGroupId, $year, $status, $firstResult, $maxResults);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Contract[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listContractsAsync
     *
     * Lists contracts
     *
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     * @param  bool $listAll Returns all contracts instead of just user&#39;s own contracts. User must have permission to do this. (optional)
     * @param  string $itemGroupCategory Filters results by item group category. (optional)
     * @param  string $itemGroupId Filters results by item group id. (optional)
     * @param  int $year Filters results by year. (optional)
     * @param  string $status Filters results by status (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractsAsync($accept = null, $listAll = null, $itemGroupCategory = null, $itemGroupId = null, $year = null, $status = null, $firstResult = null, $maxResults = null)
    {
        return $this->listContractsAsyncWithHttpInfo($accept, $listAll, $itemGroupCategory, $itemGroupId, $year, $status, $firstResult, $maxResults)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContractsAsyncWithHttpInfo
     *
     * Lists contracts
     *
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     * @param  bool $listAll Returns all contracts instead of just user&#39;s own contracts. User must have permission to do this. (optional)
     * @param  string $itemGroupCategory Filters results by item group category. (optional)
     * @param  string $itemGroupId Filters results by item group id. (optional)
     * @param  int $year Filters results by year. (optional)
     * @param  string $status Filters results by status (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContractsAsyncWithHttpInfo($accept = null, $listAll = null, $itemGroupCategory = null, $itemGroupId = null, $year = null, $status = null, $firstResult = null, $maxResults = null)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract[]';
        $request = $this->listContractsRequest($accept, $listAll, $itemGroupCategory, $itemGroupId, $year, $status, $firstResult, $maxResults);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContracts'
     *
     * @param  string $accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response (optional)
     * @param  bool $listAll Returns all contracts instead of just user&#39;s own contracts. User must have permission to do this. (optional)
     * @param  string $itemGroupCategory Filters results by item group category. (optional)
     * @param  string $itemGroupId Filters results by item group id. (optional)
     * @param  int $year Filters results by year. (optional)
     * @param  string $status Filters results by status (optional)
     * @param  int $firstResult Offset of first result. Defaults to 0 (optional)
     * @param  int $maxResults Max results. Defaults to 5 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listContractsRequest($accept = null, $listAll = null, $itemGroupCategory = null, $itemGroupId = null, $year = null, $status = null, $firstResult = null, $maxResults = null)
    {

        $resourcePath = '/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listAll !== null) {
            $queryParams['listAll'] = ObjectSerializer::toQueryValue($listAll);
        }
        // query params
        if ($itemGroupCategory !== null) {
            $queryParams['itemGroupCategory'] = ObjectSerializer::toQueryValue($itemGroupCategory);
        }
        // query params
        if ($itemGroupId !== null) {
            $queryParams['itemGroupId'] = ObjectSerializer::toQueryValue($itemGroupId);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($firstResult !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($firstResult);
        }
        // query params
        if ($maxResults !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($maxResults);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContract
     *
     * Update contract
     *
     * @param  string $id contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\Contract
     */
    public function updateContract($id, $body)
    {
        list($response) = $this->updateContractWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateContractWithHttpInfo
     *
     * Update contract
     *
     * @param  string $id contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\Contract, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContractWithHttpInfo($id, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->updateContractRequest($id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Contract',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContractAsync
     *
     * Update contract
     *
     * @param  string $id contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractAsync($id, $body)
    {
        return $this->updateContractAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContractAsyncWithHttpInfo
     *
     * Update contract
     *
     * @param  string $id contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\Contract';
        $request = $this->updateContractRequest($id, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContract'
     *
     * @param  string $id contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\Contract $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContractRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateContract'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateContract'
            );
        }

        $resourcePath = '/contracts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContractDocumentTemplate
     *
     * Updates contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate
     */
    public function updateContractDocumentTemplate($contractId, $contractDocumentTemplateId, $body)
    {
        list($response) = $this->updateContractDocumentTemplateWithHttpInfo($contractId, $contractDocumentTemplateId, $body);
        return $response;
    }

    /**
     * Operation updateContractDocumentTemplateWithHttpInfo
     *
     * Updates contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContractDocumentTemplateWithHttpInfo($contractId, $contractDocumentTemplateId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->updateContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContractDocumentTemplateAsync
     *
     * Updates contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractDocumentTemplateAsync($contractId, $contractDocumentTemplateId, $body)
    {
        return $this->updateContractDocumentTemplateAsyncWithHttpInfo($contractId, $contractDocumentTemplateId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContractDocumentTemplateAsyncWithHttpInfo
     *
     * Updates contract document template
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContractDocumentTemplateAsyncWithHttpInfo($contractId, $contractDocumentTemplateId, $body)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate';
        $request = $this->updateContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId, $body);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContractDocumentTemplate'
     *
     * @param  string $contractId contract id (required)
     * @param  string $contractDocumentTemplateId contract id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ContractDocumentTemplate $body Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContractDocumentTemplateRequest($contractId, $contractDocumentTemplateId, $body)
    {
        // verify the required parameter 'contractId' is set
        if ($contractId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractId when calling updateContractDocumentTemplate'
            );
        }
        // verify the required parameter 'contractDocumentTemplateId' is set
        if ($contractDocumentTemplateId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contractDocumentTemplateId when calling updateContractDocumentTemplate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateContractDocumentTemplate'
            );
        }

        $resourcePath = '/contracts/{contractId}/documentTemplates/{contractDocumentTemplateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contractId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contractId),
                $resourcePath
            );
        }
        // path params
        if ($contractDocumentTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'contractDocumentTemplateId' . '}',
                ObjectSerializer::toPathValue($contractDocumentTemplateId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
