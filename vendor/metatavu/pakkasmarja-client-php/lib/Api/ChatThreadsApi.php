<?php
/**
 * ChatThreadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pakkasmarja REST API
 *
 * REST API for Pakkasmarja
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Pakkasmarja\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Metatavu\Pakkasmarja\ApiException;
use Metatavu\Pakkasmarja\Configuration;
use Metatavu\Pakkasmarja\HeaderSelector;
use Metatavu\Pakkasmarja\ObjectSerializer;

/**
 * ChatThreadsApi Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Pakkasmarja
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChatThreadsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createThreadPredefinedText
     *
     * Creates a predefined text for a thread
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText
     */
    public function createThreadPredefinedText($threadId, $predefinedTextId, $payload)
    {
        list($response) = $this->createThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId, $payload);
        return $response;
    }

    /**
     * Operation createThreadPredefinedTextWithHttpInfo
     *
     * Creates a predefined text for a thread
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText, HTTP status code, HTTP response headers (array of strings)
     */
    public function createThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId, $payload)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->createThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createThreadPredefinedTextAsync
     *
     * Creates a predefined text for a thread
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createThreadPredefinedTextAsync($threadId, $predefinedTextId, $payload)
    {
        return $this->createThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createThreadPredefinedTextAsyncWithHttpInfo
     *
     * Creates a predefined text for a thread
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId, $payload)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->createThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createThreadPredefinedText'
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload)
    {
        // verify the required parameter 'threadId' is set
        if ($threadId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $threadId when calling createThreadPredefinedText'
            );
        }
        // verify the required parameter 'predefinedTextId' is set
        if ($predefinedTextId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $predefinedTextId when calling createThreadPredefinedText'
            );
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling createThreadPredefinedText'
            );
        }

        $resourcePath = '/chatThreads/{threadId}/predefinedTexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($threadId !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($threadId),
                $resourcePath
            );
        }
        // path params
        if ($predefinedTextId !== null) {
            $resourcePath = str_replace(
                '{' . 'predefinedTextId' . '}',
                ObjectSerializer::toPathValue($predefinedTextId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findChatThreadPredefinedText
     *
     * Finds a thread predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText
     */
    public function findChatThreadPredefinedText($threadId, $predefinedTextId)
    {
        list($response) = $this->findChatThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId);
        return $response;
    }

    /**
     * Operation findChatThreadPredefinedTextWithHttpInfo
     *
     * Finds a thread predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText, HTTP status code, HTTP response headers (array of strings)
     */
    public function findChatThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->findChatThreadPredefinedTextRequest($threadId, $predefinedTextId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findChatThreadPredefinedTextAsync
     *
     * Finds a thread predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findChatThreadPredefinedTextAsync($threadId, $predefinedTextId)
    {
        return $this->findChatThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findChatThreadPredefinedTextAsyncWithHttpInfo
     *
     * Finds a thread predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findChatThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->findChatThreadPredefinedTextRequest($threadId, $predefinedTextId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findChatThreadPredefinedText'
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findChatThreadPredefinedTextRequest($threadId, $predefinedTextId)
    {
        // verify the required parameter 'threadId' is set
        if ($threadId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $threadId when calling findChatThreadPredefinedText'
            );
        }
        // verify the required parameter 'predefinedTextId' is set
        if ($predefinedTextId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $predefinedTextId when calling findChatThreadPredefinedText'
            );
        }

        $resourcePath = '/chatThreads/{threadId}/predefinedTexts/{predefinedTextId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($threadId !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($threadId),
                $resourcePath
            );
        }
        // path params
        if ($predefinedTextId !== null) {
            $resourcePath = str_replace(
                '{' . 'predefinedTextId' . '}',
                ObjectSerializer::toPathValue($predefinedTextId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listChatThreadPredefinedTexts
     *
     * List thread's predefined texts
     *
     * @param  int $threadId thread id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ThreadPredefinedText[]
     */
    public function listChatThreadPredefinedTexts($threadId)
    {
        list($response) = $this->listChatThreadPredefinedTextsWithHttpInfo($threadId);
        return $response;
    }

    /**
     * Operation listChatThreadPredefinedTextsWithHttpInfo
     *
     * List thread's predefined texts
     *
     * @param  int $threadId thread id (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ThreadPredefinedText[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listChatThreadPredefinedTextsWithHttpInfo($threadId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ThreadPredefinedText[]';
        $request = $this->listChatThreadPredefinedTextsRequest($threadId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ThreadPredefinedText[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listChatThreadPredefinedTextsAsync
     *
     * List thread's predefined texts
     *
     * @param  int $threadId thread id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listChatThreadPredefinedTextsAsync($threadId)
    {
        return $this->listChatThreadPredefinedTextsAsyncWithHttpInfo($threadId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listChatThreadPredefinedTextsAsyncWithHttpInfo
     *
     * List thread's predefined texts
     *
     * @param  int $threadId thread id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listChatThreadPredefinedTextsAsyncWithHttpInfo($threadId)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ThreadPredefinedText[]';
        $request = $this->listChatThreadPredefinedTextsRequest($threadId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listChatThreadPredefinedTexts'
     *
     * @param  int $threadId thread id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listChatThreadPredefinedTextsRequest($threadId)
    {
        // verify the required parameter 'threadId' is set
        if ($threadId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $threadId when calling listChatThreadPredefinedTexts'
            );
        }

        $resourcePath = '/chatThreads/{threadId}/predefinedTexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($threadId !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($threadId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChatThreadPredefinedText
     *
     * Updates a thread's predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText
     */
    public function updateChatThreadPredefinedText($threadId, $predefinedTextId, $payload)
    {
        list($response) = $this->updateChatThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId, $payload);
        return $response;
    }

    /**
     * Operation updateChatThreadPredefinedTextWithHttpInfo
     *
     * Updates a thread's predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \Metatavu\Pakkasmarja\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChatThreadPredefinedTextWithHttpInfo($threadId, $predefinedTextId, $payload)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->updateChatThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Pakkasmarja\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChatThreadPredefinedTextAsync
     *
     * Updates a thread's predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChatThreadPredefinedTextAsync($threadId, $predefinedTextId, $payload)
    {
        return $this->updateChatThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChatThreadPredefinedTextAsyncWithHttpInfo
     *
     * Updates a thread's predefined text
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChatThreadPredefinedTextAsyncWithHttpInfo($threadId, $predefinedTextId, $payload)
    {
        $returnType = '\Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText';
        $request = $this->updateChatThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChatThreadPredefinedText'
     *
     * @param  int $threadId thread id (required)
     * @param  int $predefinedTextId predefined text id (required)
     * @param  \Metatavu\Pakkasmarja\Api\Model\ChatThreadPredefinedText $payload predefined text (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChatThreadPredefinedTextRequest($threadId, $predefinedTextId, $payload)
    {
        // verify the required parameter 'threadId' is set
        if ($threadId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $threadId when calling updateChatThreadPredefinedText'
            );
        }
        // verify the required parameter 'predefinedTextId' is set
        if ($predefinedTextId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $predefinedTextId when calling updateChatThreadPredefinedText'
            );
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling updateChatThreadPredefinedText'
            );
        }

        $resourcePath = '/chatThreads/{threadId}/predefinedTexts/{predefinedTextId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($threadId !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($threadId),
                $resourcePath
            );
        }
        // path params
        if ($predefinedTextId !== null) {
            $resourcePath = str_replace(
                '{' . 'predefinedTextId' . '}',
                ObjectSerializer::toPathValue($predefinedTextId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
